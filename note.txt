# Usage Example

_fileName.scss => @import 'fileName';

_fileName.scss => @use 'fileName';

@mixin mixinName {} => @include mixinName();

@function functionName {} => functionName();

%name {} => @extend %name; (... ;)

---------------------------------------------------------------

# Install Sass Compiler
$ npm i -g sass

--- 
# Execute the Compiler: sass [input] [output]
$ sass scss/style.scss css/style.css

# Continuous Executing : sass --watch [input] [output]
$ sass --watch scss/style.scss css/style.css

---
# Or Use VSC Extension : 'Live Sass Compiler'
... VSC > Settings > 'livs sass compile' > Edit in settings.json
...
    "liveSassCompile.settings.formats": [
        {
            "format": "compressed",
            // "extensionName": "min.css",
            "extensionName": ".css",
            // "savePath": "/dist/css",
            "savePath": "/css",
        }
    ]
...

---------------------------------------------------------------
What is Sass?
- Syntatically Awesome Style Sheets
- CSS Pre Processor / Extension
- Let you use features that do not exist in CSS
- Sass files are compiled to reagular CSS

```CSS(.css)
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}
```

```Sass(.sass)
$font-stack: Helvetica, sans-serif
$primary-color: #333

body
  font: 100% $font-stack
  color: $primary-color

```

```SCSS(.scss)
$font-stack: Helvetica, sans-serif;
$primary-color: #333;

body {
  font: 100% $font-stack;
  color: $primary-color;
}
```

---------------------------------------------------------------
Variables In CSS
- Prefixed with a '$' : ex) $primary-color: blue
- Easier to read and write than CSS custom properties

---------------------------------------------------------------
Nesting

```CSS
nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}
```

```Sass
nav
  ul
    margin: 0
    padding: 0
    list-style: none

  li
    display: inline-block

  a
    display: block
    padding: 6px 12px
    text-decoration: none


```

```SCSS
nav {
  ul {
    margin: 0;
    padding: 0;
    list-style: none;
  }
  li { 
    display: inline-block; 
  }
  a {
    display: block;
    padding: 6px 12px;
    text-decoration: none;
  }
}
```

---------------------------------------------------------------
Modules & Partials

```CSS
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}
.inverse {
  background-color: #333;
  color: white;
}
```

```Sass
// _base.sass
$font-stack: Helvetica, sans-serif
$primary-color: #333

body
  font: 100% $font-stack
  color: $primary-color

// styles.sass
@use 'base'

.inverse
  background-color: base.$primary-color
  color: white

```

```SCSS
// _base.scss
$font-stack: Helvetica, sans-serif;
$primary-color: #333;

body {
  font: 100% $font-stack;
  color: $primary-color;
}

// styles.scss
@use 'base';

.inverse {
  background-color: base.$primary-color;
  color: white;
}
```

---------------------------------------------------------------
Mixins & Functions

```CSS
.info {
  background: DarkGray;
  box-shadow: 0 0 1px rgba(169, 169, 169, 0.25);
  color: #fff;
}
.alert {
  background: DarkRed;
  box-shadow: 0 0 1px rgba(139, 0, 0, 0.25);
  color: #fff;
}
.success {
  background: DarkGreen;
  box-shadow: 0 0 1px rgba(0, 100, 0, 0.25);
  color: #fff;
}
```

```Sass
@mixin theme($theme: DarkGray)
  background: $theme
  box-shadow: 0 0 1px rgba($theme, .25)
  color: #fff

.info
  @include theme

.alert
  @include theme($theme: DarkRed)

.success
  @include theme($theme: DarkGreen)

```

```SCSS
@mixin theme($theme: DarkGray) {
  background: $theme;
  box-shadow: 0 0 1px rgba($theme, .25);
  color: #fff;
}

.info {
  @include theme;
}
.alert {
  @include theme($theme: DarkRed);
}
.success {
  @include theme($theme: DarkGreen);
}
```

---------------------------------------------------------------
Extend / Inheritance

```CSS
/* This CSS will print because %message-shared is extended. */
.warning, .error, .success, .message {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}
.success {
  border-color: green;
}
.error {
  border-color: red;
}
.warning {
  border-color: yellow;
}
```

```Sass
/* This CSS will print because %message-shared is extended. */
%message-shared
  border: 1px solid #ccc
  padding: 10px
  color: #333

// This CSS won't print because %equal-heights is never extended.
%equal-heights
  display: flex
  flex-wrap: wrap

.message
  @extend %message-shared

.success
  @extend %message-shared
  border-color: green

.error
  @extend %message-shared
  border-color: red

.warning
  @extend %message-shared
  border-color: yellow

```

```SCSS
/* This CSS will print because %message-shared is extended. */
%message-shared {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

// This CSS won't print because %equal-heights is never extended.
%equal-heights {
  display: flex;
  flex-wrap: wrap;
}

.message {
  @extend %message-shared;
}
.success {
  @extend %message-shared;
  border-color: green;
}
.error {
  @extend %message-shared;
  border-color: red;
}
.warning {
  @extend %message-shared;
  border-color: yellow;
}
```

---------------------------------------------------------------
Operators

```CSS
.container {
  display: flex;
}
article[role=main] {
  width: 62.5%;
}
aside[role=complementary] {
  width: 31.25%;
  margin-left: auto;
}
```

```Sass
@use "sass:math"

.container
  display: flex

article[role="main"]
  width: math.div(600px, 960px) * 100%

aside[role="complementary"]
  width: math.div(300px, 960px) * 100%
  margin-left: auto

```

```SCSS
@use "sass:math";

.container {
  display: flex;
}
article[role="main"] {
  width: math.div(600px, 960px) * 100%;
}
aside[role="complementary"] {
  width: math.div(300px, 960px) * 100%;
  margin-left: auto;
}
```

---------------------------------------------------------------
Conditionals

```CSS
.square-av {
  width: 100px;
  height: 100px;
}
.circle-av {
  width: 100px;
  height: 100px;
  border-radius: 50px;
}

```

```Sass
@use "sass:math"

@mixin avatar($size, $circle: false)
  width: $size
  height: $size

  @if $circle
    border-radius: math.div($size, 2)



.square-av
  @include avatar(100px, $circle: false)

.circle-av
  @include avatar(100px, $circle: true)

```

```SCSS
@use "sass:math";

@mixin avatar($size, $circle: false) {
  width: $size;
  height: $size;

  @if $circle {
    border-radius: math.div($size, 2);
  }
}

.square-av {
  @include avatar(100px, $circle: false);
}
.circle-av {
  @include avatar(100px, $circle: true);
}
```